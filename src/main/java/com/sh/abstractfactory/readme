这并不是一个抽象工厂模式，而是工厂方法模式。下面abstractfactory是实现抽象工厂模式的方案。

想abstractfactory中的工厂方法模式，使用的时候我们需要知道两个工厂，甚至三个工厂的联系才能正常使用。
这样肯定是不友好的。耦合严重。
例如：
目前我们想创建一个凯迪拉克SUV，客户端使用的时候，就需要实例化2个工厂。
而如果我们在外面封装一层，创建一个接口A：用来生产不同品牌的不同车型的车。
 例如，这里我们 只需要实现这个接口就行了。
还可以创建凯迪拉克小型车的工厂。
这样我们如果想更换商品，直接把封装的这个工厂换掉就行了。有个好处，封装。

但是如果：我们现在想创建加长版凯迪拉克，就需要更改修改我们的接口A。
随之实现的工厂都需要修改。违背了开闭原则。


抽象工厂模式适用情况：
所有工厂模式要求的约定都需要遵守：对象的创建和使用隔离。不需要关心对象的内部使用。
然后如果用户只需要使用某一个具体产品，那么通过配置文件来改变。
抽象的那个产品结构稳定。